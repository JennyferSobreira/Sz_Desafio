# -*- coding: utf-8 -*-
"""Seazone_Challenge_Jennyfer.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1fzAqB7ivFj0nSkZrvAA2hGfDN1OiM1Lg

# **IMPORTAÇÕES**
"""

import numpy as np
import pandas as pd
import dataprep
from dataprep.eda import create_report
from dataprep.eda import plot
import datetime

"""# **TABELA DESAFIO_PRICEAV.CSV**"""

priceav = pd.read_csv('desafio_priceav.csv', sep = ',')
priceav = priceav.drop(columns = ['Unnamed: 0', 'Unnamed: 0.1'])
pd.set_option('display.max_rows', 5)
priceav = priceav.apply(lambda booked_on: booked_on.replace('blank', 'Null'))

priceav.rename(columns = {'airbnb_listing_id' : 'airbnb_listing_id'}, inplace = True)
priceav

pc_id_asc = priceav.nsmallest(354521, 'airbnb_listing_id')
pc_id_asc

"""# **TABELA DESAFIO_DETAILS.CSV**"""

details = pd.read_csv('desafio_details.csv', sep = ',')
details.rename(columns = {'suburb' : 'location'}, inplace = True)
details = details.drop(columns = ['Unnamed: 0'])
details

dt_id_asc = details.nsmallest(4691, 'airbnb_listing_id')
dt_id_asc

"""# **1. Ordene os bairros em ordem crescente de número de listings**"""

location_adname = details.iloc[:,[2, 1]]
num_listing = location_adname.groupby(['location']).count()
num_listing

num_listing_cres = num_listing.nsmallest(6, 'ad_name')
num_listing_cres

"""# **2. Ordene os bairros em ordem crescente de faturamento médio dos listings**"""

price_details = pd.merge(pc_id_asc, dt_id_asc, on=['airbnb_listing_id'], how='inner')
price_details_notnull = price_details.loc[price_details['booked_on'] != 'Null']
price_details_notnull

fm_price_details = price_details_notnull.groupby('location').mean()
fm_price_details

fm_location = fm_price_details.nsmallest(6, 'price_string')
fm_location_cres = fm_location.iloc[:,[1]]
fm_location_cres

"""# **3. Existem correlações entre as características de um anúncio e seu faturamento?**
# **a. Quais? Explique**
"""

price_details2 = price_details_notnull.iloc[:,[3, 5, 6]]

price_details3 = price_details2.groupby('ad_name').sum()

price_details4 = pd.merge(price_details3, price_details2, on=['ad_name'], how='inner')

price_details5 = price_details4.drop(columns = ['price_string_y',])

price_details6 = price_details5.drop_duplicates()

corr_fat_anun = price_details6.iloc[:,[2, 0, 1]]
create_report(corr_fat_anun)

"""# **4. Qual a antecedência média das reservas?**
# **a. Esse número é maior ou menor para finais de semana?**

"""

booked_on_date = price_details_notnull.iloc[:,[1,2]]

booked_on_date['date'] =  pd.to_datetime(booked_on_date['date'],
                              format='%Y-%m-%d')
booked_on_date['booked_on'] =  pd.to_datetime(booked_on_date['booked_on'],
                              format='%Y-%m-%d')
booked_on_date

antec_reservas = booked_on_date.assign(antecedencia_reservas = booked_on_date['date'] - booked_on_date['booked_on'])
antec_reservas

antec_reservas = booked_on_date.assign(antecedencia_reservas = booked_on_date['date'] - booked_on_date['booked_on'])

med_antec_reservas = antec_reservas.iloc[:,[2]]

med_antec_reservas.mean()

reserva_semana = antec_reservas['date'].dt.dayofweek
plot(reserva_semana)